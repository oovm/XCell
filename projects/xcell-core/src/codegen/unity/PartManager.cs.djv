// 代码生成, 修改无效!
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable RedundantAbstractModifier
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable CheckNamespace

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Xml;
using UnityEditor;

namespace {{ config.namespace }}
{
    /// <summary>
    /// 热更新资源直接 set 即可
    ///
    /// 释放资源直接将表设为 null 即可
    /// </summary>
    public partial class {{ config.manager_name }}
    {
        /// <summary>
        /// 配置表的版本号
        /// </summary>
        /// <remarks>手动配置</remarks>
        public const string TableVersion = "{{ table_version }}";

        /// <summary>
        /// 配置表的最后修改时间 (UTC)
        /// </summary>
        /// <remarks>自动生成</remarks>
        public DateTime TableEditTime = {{ edit_time }};

        private static readonly Lazy<{{ config.manager_name }}> singleton = new(() => new {{ config.manager_name }}());
        public static {{ config.manager_name }} {{ config.instance_name }} => singleton.Value;
{% for table in tables %}
        private {{ table.type }} {{ table.type | private_name }};
        /// <inheritdoc cref="{{config.namespace}}.{{ table.type }}"/>
        public {{ table.type }} {{ table.type | public_name }}
        {
{%- if config.legacy_null_null %}
            get { return {{ table.type | private_name }} != null ? {{ table.type | private_name }} : new {{ table.type }}(); }
{%- else %}
            get => {{ table.type | private_name }} ?? new {{ table.type }}();
{%- endif %}
            set => {{ table.type | private_name }} = value;
        }
{% endfor %}
        [MenuItem("Tools/XCell/LoadAll")]
        public static void Reload()
        {
{%- for table in tables %}
            {{ config.instance_name }}.{{ table.type | private_name }} = new {{ table.type }}();
{%- endfor %}
        }
        [MenuItem("Tools/XCell/ClearAll")]
        public static void Clear()
        {
{%- for table in tables %}
            {{ config.instance_name }}.{{ table.type | private_name }} = null;
{%- endfor %}
        }

        [MenuItem("Tools/XCell/ExportXML")]
        public static void ExportXML()
        {
{%- for table in tables %}
            SerializerXML("Assets/Data/Table/Binary/{{ table.type }}.xml", {{ config.instance_name }}.{{ table.type | private_name }});
{%- endfor %}
        }

        [MenuItem("Tools/XCell/ExportJSON")]
        public static void ExportJSON()
        {
{%- for table in tables %}
            SerializerJSON("Assets/Data/Table/Readable/{{ table.type }}.json", {{ config.instance_name }}.{{ table.type | private_name }});
{%- endfor %}
        }

        private static void SerializerXML<T>(string path, T table)
        {
            var serializer = new DataContractSerializer(typeof(T));
            using var fs = File.Create(path);
            using var writer = XmlWriter.Create(fs, new XmlWriterSettings
            {
                Indent = true,
                IndentChars = "\t",
                NewLineChars = "\n",
                Encoding = new UTF8Encoding(false),
            });
            serializer.WriteObject(writer, table);
        }

        private static void SerializerJSON<T>(string path, T table)
        {
            var serializer = new DataContractJsonSerializer(typeof(T));
            using var fs = File.Create(path);
            using var writer = JsonReaderWriterFactory.CreateJsonWriter(fs, Encoding.UTF8, true, true, "\t");
            serializer.WriteObject(writer, table);
        }
    }

    public interface IBinarySupport
    {
        /// <summary>
        /// 以小端序 (LittleEndian) 读取二进制数据
        /// </summary>
        /// <param name="r">二进制读取流</param>
        public abstract void BinaryRead(BinaryReader r);

        /// <summary>
        /// 以小端序 (LittleEndian) 写入二进制数据
        /// </summary>
        /// <param name="w">二进制写入流</param>
        public abstract void BinaryWrite(BinaryWriter w);
    }

    public interface IXmlSupport
    {
        /// <summary>
        /// 读取 XML
        /// </summary>
        /// <param name="r"></param>
        public abstract void XmlRead(BinaryReader r);
        /// <summary>
        /// 写入 XML
        /// </summary>
        /// <param name="w"></param>
        public abstract void XmlWrite(BinaryWriter w);
    }
}